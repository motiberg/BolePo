package com.bergerlavy.bolepo.forms;

import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;

import android.app.ListActivity;
import android.content.Intent;
import android.os.Bundle;
import android.view.Menu;
import android.view.View;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import com.bergerlavy.bolepo.BolePoConstants;
import com.bergerlavy.bolepo.R;
import com.bergerlavy.bolepo.forms.BolePoContactsAdapter.BolePoContactsComparator;

public class BolePoContactsActivity extends ListActivity {

	private int mContactsCount;
	private TextView mNumberOfContacts;
	private BolePoContactsAdapter mArrayAdapter;
	private List<BolePoContact> mAllContacts;
	//	private List<Integer> mSelectedContacts;
	private List<String> mSelectedContacts;

	public static final String EXTRA_PHONE_NUMBERS = "EXTRA_PHONE_NUMBERS";

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_bole_po_contacts);

		mNumberOfContacts = (TextView) findViewById(R.id.bolepo_contacts_number_of_contacts);
		mAllContacts = new LinkedList<BolePoContact>();
		mSelectedContacts = new ArrayList<String>();

		Bundle bundle = getIntent().getExtras();
		if (bundle != null) {
			if (bundle.containsKey(AddParticipantsActivity.EXTRA_PARTICIPANTS)) {
				String ps[] = bundle.getStringArray(AddParticipantsActivity.EXTRA_PARTICIPANTS);
				if (ps != null)
					for (String s : ps) {
						mSelectedContacts.add(s);
					}
			}
		}
		if (mSelectedContacts != null) {
			mContactsCount = mSelectedContacts.size();
		}
		else {
			mSelectedContacts = new ArrayList<String>();
			mContactsCount = 0;
		}
		mNumberOfContacts.setText(mContactsCount + "");

		/* reading the contacts that are registered to the application from a file generated by the 
		 * contacts service */
		try {
			FileInputStream fis = openFileInput(BolePoConstants.CONTACTS_FILE_NAME);
			String name;
			String phone;
			while (!((name = readNameFromFile(fis)).equalsIgnoreCase(""))) {
				phone = readPhoneFromFile(fis);
				BolePoContact.Builder contactBuilder = new BolePoContact.Builder(name, phone);
				if (isContactSelected(phone))
					mAllContacts.add(contactBuilder.select().build());
				else mAllContacts.add(contactBuilder.build());
			}
			fis.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		

		mArrayAdapter = new BolePoContactsAdapter(this, R.layout.item_bolepo_contact, mAllContacts);
		mArrayAdapter.sort(new BolePoContactsAdapter.BolePoContactsComparator());
		getListView().setAdapter(mArrayAdapter);
	}

	private String readNameFromFile(FileInputStream fis) throws IOException {
		String name = "";
		char c, d, e;
		int x;
		while ((x = fis.read()) != -1) {
			c = (char) x;
			if (c != '#')
				name += c;
			else {
				x = fis.read();
				d = (char) x;
				if (d != -1) {
					if (d != '@') {
						name += d;
					}
					else {
						x = fis.read();
						e = (char) x;
						if (e != -1) {
							if (e != '%') {
								name += e;
							}
							else {
								break;
							}
						}
					}
				}
			}
		}
		return name;
	}
	
	private String readPhoneFromFile(FileInputStream fis) throws IOException {
		String phone = "";
		char c, d, e;
		int x;
		while ((x = fis.read()) != -1) {
			c = (char) x;
			if (c != '%')
				phone += c;
			else {
				x = fis.read();
				d = (char) x;
				if (d != -1) {
					if (d != '@') {
						phone += d;
					}
					else {
						x = fis.read();
						e = (char) x;
						if (e != -1) {
							if (e != '#') {
								phone += e;
							}
							else {
								break;
							}
						}
					}
				}
			}
		}
		return phone;
	}
	
	/**
	 * Checks if the input phone number is one of the phone numbers that received from the calling activity.
	 * If it does, that means that this phone number belongs to a contact that is already invited to the meeting.
	 * Further more, that means that the calling activity is in MODIFY mode.
	 * @param phoneNumber phone number to check for existence in the already invited contacts phone numbers.
	 * @return <ul><li><code>true</code> if the contact that phoneNumber is his phone number is already invited, <code>false</code> otherwise.</li></ul>
	 */
	private boolean isContactSelected(String phoneNumber) {
		for (String s : mSelectedContacts) {
			if (phoneNumber.equalsIgnoreCase(s))
				return true;
		}
		return false;
	}

	@Override
	protected void onListItemClick(ListView l, View v, int position, long id) {
		TextView phone = (TextView) v.findViewById(R.id.item_bolepo_contact_phone);

		if (!mSelectedContacts.contains(phone.getText().toString())) {
			mSelectedContacts.add(phone.getText().toString());
			mAllContacts.get(position).select();
			mContactsCount++;
		}
		else {
			mSelectedContacts.remove(phone.getText().toString());
			mAllContacts.get(position).unselect();
			mContactsCount--;
		}

		/* displaying the updated number of contacts selected */
		mNumberOfContacts.setText(mContactsCount + "");

		/* refreshing the list so the chosen contacts will appear first */
		mArrayAdapter.notifyDataSetChanged();
		Collections.sort(mAllContacts, new BolePoContactsComparator());
		super.onListItemClick(l, v, position, id);
	}

	@Override
	public void finish() {
		int i = 0;
		Intent data = new Intent();
		String[] phones = new String[mSelectedContacts.size()];
		for (String phone : mSelectedContacts) {
			phones[i++] = phone;
		}
		data.putExtra(EXTRA_PHONE_NUMBERS, phones);
		setResult(RESULT_OK, data); 

		super.finish();
	}


}
